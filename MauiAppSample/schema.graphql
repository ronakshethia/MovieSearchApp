schema {
  query: QueryBase
  mutation: MutationsBase
  subscription: SubscriptionBase
}

type QueryBase {
  allAppMenus: [AppMenuTable]
  allMasters: Masters
  allCustomers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): AllCustomersConnection
  customerDetails(mobileNumber: String): CustomerTable
  customerTickets(mobileNumber: String dateTime: DateTime! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): CustomerTicketsConnection
  connectionCheck: String
}

type MutationsBase {
  addNewCustomer(customerTable: CustomerTableInput): CustomerTable
  updateExistingCustomer(id: UUID! customerTable: CustomerTableInput): CustomerTable
  deleteCustomer(id: UUID!): Boolean!
  addAppMenu(appMenuTable: AppMenuTableInput): AppMenuTable
  syncCustomersFromPhone(customerTables: [CustomerTableInput]): Boolean!
  createTicket(ticketTable: TicketTableInput): TicketTable
  addProductType(master: MasterDTOInput): MasterDTO
  addTicketStatusType(master: MasterDTOInput): MasterDTO
  addProductRepairStatus(master: MasterDTOInput): MasterDTO
}

type SubscriptionBase {
  customerCreated: CustomerTable
  customerUpdate(cusomerName: String): CustomerTable
}

"A connection to a list of items."
type AllCustomersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AllCustomersEdge!]
  "A flattened list of the nodes."
  nodes: [CustomerTable]
}

"A connection to a list of items."
type CustomerTicketsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CustomerTicketsEdge!]
  "A flattened list of the nodes."
  nodes: [TicketTable]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type AllCustomersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CustomerTable
}

"An edge in a connection."
type CustomerTicketsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TicketTable
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

type CustomerTable {
  id: UUID!
  name: String!
  phoneNumber: String!
  altPhoneNumber: String!
  createdOn: DateTime!
  customerTickets: [TicketTable]
}

type Masters {
  productRepairStatusList: [MasterDTO]
  productTypesList: [MasterDTO]
  ticketStatusTables: [MasterDTO]
}

type AppMenuTable {
  menuItemId: UUID!
  menuItemName: String
  menuItemImageUrl: String
  isEnabled: Boolean!
  sequence: Int!
}

input CustomerTableInput {
  id: UUID!
  name: String!
  phoneNumber: String!
  altPhoneNumber: String!
  customerTickets: [TicketTableInput]
}

scalar UUID

input AppMenuTableInput {
  menuItemId: UUID!
  menuItemName: String
  menuItemImageUrl: String
  isEnabled: Boolean!
  sequence: Int!
}

type TicketTable {
  ticketId: UUID!
  customerId: UUID!
  submissionDateTime: DateTime!
  ticketStatusId: Int!
  paymentId: UUID!
  products: [ProductTable]
  tokenNumber: String
}

input TicketTableInput {
  ticketId: UUID!
  customerId: UUID!
  submissionDateTime: DateTime!
  ticketStatusId: Int!
  paymentId: UUID!
  products: [ProductTableInput]
  tokenNumber: String
}

type MasterDTO {
  key: Int!
  value: String
}

input MasterDTOInput {
  key: Int!
  value: String
}

input ProductTableInput {
  id: UUID!
  productName: String
  productTypeId: Int!
  serialNumber: String
  issueDescription: String
  additionalDescription: String
  productRepairStatusId: UUID!
  repairAttemptSummary: String
  ticketId: String
  images: [String]
}

type ProductTable {
  id: UUID!
  productName: String
  productTypeId: Int!
  serialNumber: String
  issueDescription: String
  additionalDescription: String
  productRepairStatusId: UUID!
  repairAttemptSummary: String
  ticketId: String
  images: [String]
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION